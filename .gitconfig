[user]
    name = DirkViljoen
    email = dirkcharl.viljoen@gmail.com
 
[credential]
  helper = cache
 
[log]
  decorate = short
 
[pager]
  status = true
  show-branch = true
  color = true
 
[rebase]
  autosquash = true
  # for fixup hotness later
 
[rerere]
  enabled = true
  # Reuse recorded resolution of conflicted merges
  # see `man git-rerere'
 
[alias]
  ci = commit -a -m 
  co = checkout
  amend = commit --amend -a -m
  st = status
  praise = blame
  br = branch
  df = diff
  lg = log -p
  lol = log --graph --decorate --pretty=oneline --abbrev-commit
  lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  ls = ls-files
    
  oneline = log --oneline
  # e14d631 (HEAD, origin/master, origin/HEAD, master) Merge branch 'maint'
  # 0f64a5a Merge branch 'rr/misc-fixes'
  # ef563de convert.c: Fix return type of git_path_check_eol()
  # 1e501a7 (origin/maint) documentation fix: git difftool uses diff tools, not merge tools.
  # 05bab3e config.c: Fix a static buffer overwrite bug by avoiding mkpath()
  # 3a81f33 t5501-*.sh: Fix url passed to clone in setup test
 
  graph = log --oneline --graph
  # *   e14d631 (HEAD, origin/master, origin/HEAD, master) Merge branch 'maint'
  # |\
  # | * 1e501a7 (origin/maint) documentation fix: git difftool uses diff tools, not merge tools.
  # * |   0f64a5a Merge branch 'rr/misc-fixes'
  # |\ \
  # | * | ef563de convert.c: Fix return type of git_path_check_eol()
  # * | | 05bab3e config.c: Fix a static buffer overwrite bug by avoiding mkpath()
  # * | | 3a81f33 t5501-*.sh: Fix url passed to clone in setup test
  
  last = log -1
  # show the commit message of HEAD
 
  patch = add --patch
  # add hunks of code interactively
  # useful for separating a bunch of changes into logical commits
  
  staged = diff --cached
  both = diff HEAD
  # shows modified+staged union diff
 
  sha1 = !sh -c 'git rev-parse ${1-`echo HEAD`}' -
  # sha1 of the current branch's HEAD
 
  abbrev = !sh -c 'git rev-parse --short ${1-`echo HEAD`}' -
  # shows a 7 character abbreviation of a reference, defaulting to HEAD
 
  ph = push origin HEAD
  # push HEAD on the current branch to the branch on origin
 
  poh = pull --rebase origin HEAD
  # pull upstream changes locally only if
  # - local is already up to date
  # - local changes can be cleanly rebased on top of origin and fast-forwarded
 
  rom = rebase origin/master
  # useful rebasing your topic branch against the newest version of master
 
  fixup = !sh -c 'git commit --fixup $1 && \
                  git stash && \
                  git rebase -i $1~1 && \
                  git stash pop' -
  # amend to a previous commit:
  #  git add file
  #  git fixup HEAD^^
  # will put the changes to 'file' to the commit two behind HEAD
 
  ri = rebase --interactive
  # perform an interactive rebase from a given commitish
 
  fresh = !git fetch --all && git reset --hard origin/master -
  # fetch from all remotes and reset to origin/master
  
[apply]
  whitespace = fix
  # automagically fix whitespace
  # see `man git-apply' for other options
 
[help]
  autocorrect = 10
  # elcalafate:git derwiki$ git lgo
  # WARNING: You called a Git command named 'lgo', which does not exist.
  # Continuing under the assumption that you meant 'log'
  # in 1.0 seconds automatically...
 
[diff]
    color = auto
    rename = copy
 
[status]
    color = auto
 
[color]
    ui = auto
  [color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
  [color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
  [color "status"]
    added = yellow
    changed = green
    untracked = cyan
[color]
    ui = true
  [color "diff"]
    whitespace = red reverse
  [core]
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
